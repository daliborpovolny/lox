-- original grammar

expression -> equality ;

equality -> comparision ( ( "!=" | "==" ) comparision )* ;

comparision -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;

term -> factor ( ( "-" | "+" ) factor )* ;

factor -> unary ( ( "\" | "*" ) unary )* ;

unary -> ( "!" | "-" ) unary | primary ;

primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" ;


equality

comparision

adition

multiplication

unary



-- with challenges of chapter 6

expression -> non_comma_expression ( "," non_comma_expression )* ;

non_comma_expression -> ternary ;

ternary -> equality "?" equality ":" ternary | equality ;

equality -> comparision ( ( "!=" | "==" ) comparision )* ;

comparision -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;

term -> factor ( ( "-" | "+" ) factor )* ;

factor -> unary ( ( "\" | "*" ) unary )* ;

unary -> ( "!" | "-" ) unary | primary ;

primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" ;


comma

ternary

equality

comparision

adition

multiplication

unary

-- with print statement

program -> statement* EOF ;

statement -> exprtStmt | printStmt ;

exprStmt -> expression ";" ;

printStmt -> "print" expression ";" ;

-- with global vars

program -> declaration* EOF ;

declaration -> varDecl | statement ;

varDecl -> "var" IDENTIFIER ( "=" expression )? ";" ;

statement -> exprtStmt | printStmt ;

exprStmt -> expression ";" ;

printStmt -> "print" expression ";" ;


// we must expand primary with IDENTIFIER for vars to be useful
primary -> IDENTIFIER | NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" ;


-- Assignment 8.4 - Complete grammar


program -> declaration* EOF ;

declaration -> varDecl | statement ;

varDecl -> "var" IDENTIFIER ( "=" expression )? ";" ;

statement -> exprtStmt | printStmt ;

exprStmt -> expression ";" ;

printStmt -> "print" expression ";" ;


expression -> assignment;

assignment -> IDENTIFIER "=" assignment | comma ;

comma -> non_comma_expression ( "," non_comma_expression )* ;

non_comma_expression -> ternary ;

ternary -> equality "?" equality ":" ternary | equality ;

equality -> comparision ( ( "!=" | "==" ) comparision )* ;

comparision -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;

term -> factor ( ( "-" | "+" ) factor )* ;

factor -> unary ( ( "\" | "*" ) unary )* ;

unary -> ( "!" | "-" ) unary | primary ;

primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" ;



#
-- 8 End - Scope - Complete grammar
#

program -> declaration* EOF ;

declaration -> varDecl | statement ;

varDecl -> "var" IDENTIFIER ( "=" expression )? ";" ;

statement -> exprStmt | printStmt | block;

exprStmt -> expression ";" ;

printStmt -> "print" expression ";" ;

block -> "{" declaration* "}"

expression -> assignment;

assignment -> IDENTIFIER "=" assignment | comma ;

comma -> non_comma_expression ( "," non_comma_expression )* ;

non_comma_expression -> ternary ;

ternary -> equality "?" equality ":" ternary | equality ;

equality -> comparision ( ( "!=" | "==" ) comparision )* ;

comparision -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;

term -> factor ( ( "-" | "+" ) factor )* ;

factor -> unary ( ( "/" | "*" ) unary )* ;

unary -> ( "!" | "-" ) unary | primary ;

primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" ;
